buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.7"
    }
}
plugins {
    id "org.sonarqube" version "2.7"
    id 'com.android.library'
}


android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        // Gradle Plugin 1.5 vectorDrawables support: stop the Gradle pluginâ€™s automatic rasterization of vectors
        generatedDensities = []
    }
    aaptOptions {
        // Gradle Plugin 1.5 vectorDrawables support: tell aapt to keep the attribute ids around
        additionalParameters "--no-version-vectors"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }

    sourceSets {

        test {
            setRoot('src/test')
            res.srcDirs = [ 'src/test/resources' ]
        }

        test.java.srcDirs += 'build/generated/source/r/debug'
    }

    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    api fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:design:22.2.0'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'com.hbb20:ccp:2.3.9'
    testImplementation 'junit:junit:4.13'
    testImplementation 'org.hamcrest:hamcrest-core:1.3'
    testImplementation "org.robolectric:robolectric:3.2.2"

}

apply plugin: 'idea'

idea {
    module {
        testOutputDir = file('build/test-classes/debug')
    }
}



sonarqube {
    properties {
        property "sonar.host.url", "http://localhost:9000"
        property "sonar.jdbc.url", "jdbc:mysql://localhost/sonar"
        property "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
        property "sonar.jdbc.username", "sonar"
        property "sonar.jdbc.password", "sonar"

        property "sonar.java.binaries", "$buildDir"
        property "sonar.sources", "src/main/java"
        property "sonar.tests", "src/test/java"

        property 'sonar.junit.reportsPath', "$buildDir/test-results/release/"
        property "sonar.jacoco.reportPath", "$buildDir/jacoco/testDebugUnitTest.exec"
    }
}


apply plugin: "jacoco"

jacoco {
    toolVersion = "0.7.1.201405082137"
    reportsDir = file("$buildDir/reports/jacoco")
}

task jacocoTestReport(type: JacocoReport ) {
    description = "Generates Jacoco coverage reports: XML and HTML"
    group = "Reporting"

    jacocoClasspath = project.configurations['jacocoAnt']

    def fileFilter = ['**/R.class',
                      '**/R$*.class',
                      '**/BuildConfig.*',
                      '**/Manifest*.*',
                      '**/*Test*.*',
                      'android/**/*.*']

    def debugTree = fileTree(dir: "${project.buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([debugTree])
    executionData.from = fileTree(dir: project.projectDir, includes: ['**/*.exec', '**/*.ec'])

    reports {
        xml {
            enabled = true
            destination file("${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml")
        }
        csv.enabled false
        html {
            enabled = true
            destination file("${project.buildDir}/reports/jacoco")
        }
    }
}


apply plugin: 'com.github.dcendents.android-maven'

group='com.github.quemb'